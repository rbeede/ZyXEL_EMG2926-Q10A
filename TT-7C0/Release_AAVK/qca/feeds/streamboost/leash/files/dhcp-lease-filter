#!/bin/sh

# make sure only one instance is running
check_self_running() {
	[ -r "${PIDFILE}" ] && [ -e /proc/$(cat "${PIDFILE}") ] && {
		$LOGGER Already running with PID $(cat "${PIDFILE}")
		exit 1
	}
	mkdir -p "${PIDFILE}.lock" || {
		$LOGGER "Can't lock ${PIDFILE}, exiting"
		exit 1
	}
	echo $$ >"${PIDFILE}"
	rmdir "${PIDFILE}.lock"
}

# this is called on shutdown (CTRL-C or kill)
cleanup() {
        $LOGGER "Shutting down ${DISPLAY_NAME}"
        rm -f "${PIDFILE}"
        exit 0
}

# find substring, without spawning additional processes
# params: haystack, needle
has_substring() {
	case "$1" in
		*$2*) return 0 ;;
	esac
	return 1
}

# dump list of wireless clients
dump_wifi_clients() {
	WIFI_IFACES=$(iwconfig 2>/dev/null | cut -d ' ' -f 1)
	for i in $WIFI_IFACES; do
		wlanconfig "$i" list sta | grep -v ^ADDR
	done
}

# round up a list of all known clients
# output format:
#   expiry_epoch mac ip name C=0|1|x W=0|1|x
# where:
#   C=0|1|x is the connected status (0=disconnected, x=unknown)
#   W=0|n|x is the wireless received signal strength (0=wired, n>0)
#   the node is static when EXPIRY=0, dhcp otherwise
# the name and/or ip field may be "_", indicating it's unknown
# multiple entries with the same mac may be printed, too add node information
#   (e.g. to establish C or W status where it was "x" previously)
collect_clients() {
	local macfile="/tmp/macs.$$.tmp"
	>"$macfile"
	# first, get the wireless client list
	# this contains only wireless and connected clients, dhcp or not
	dump_wifi_clients | while read MAC _ _ _ _ RSSI _; do
		echo "0 $MAC _ _ C=1 W=$((RSSI+1))"
		echo "$MAC" >>"$macfile"
	done
	local wireless_macs=$(cat "$macfile")
	# next, dump the arp table
	# this contains only connected clients, dhcp or not, wireless or not
	{
		read _
		while read IP _ FLAGS MAC _ IFACE _; do
			[ "$FLAGS" != "0x0" -a "$IFACE" = "$LAN_IFACE" ] && {
				local wifi_flag=0
				has_substring "$wireless_macs" "$MAC" && wifi_flag=x
				echo "0 $MAC $IP _ C=1 W=$wifi_flag"
				echo "$MAC" >>"$macfile"
			}
		done
	} </proc/net/arp
	local connected_macs=$(cat "$macfile")
	rm -f "$macfile"
	# next, get the dhcp table
	# this contains only DHCP clients, wireless or not, connected or not
	# (this must be processed *after* all the tables that could contain
	# entries for static clients and therefore do or could output expiry=0)
	while read EXPIRY MAC IP NAME _; do
		[ "$MAC" = "00:00:00:00:00:00" -o "$MAC" = "_" ] && continue
		local wifi_flag=0
		has_substring "$wireless_macs" "$MAC" && wifi_flag=x
		local conn_flag=0
		has_substring "$connected_macs" "$MAC" && conn_flag=1
		[ "$IP" = "0.0.0.0" ] && IP="_"
		[ "$NAME" = '*' ] && NAME="_"
		echo "$EXPIRY $MAC $IP $NAME C=$conn_flag W=$wifi_flag"
	done <"${INFILE}"
}

# verify if any of the input sources has new/changed data
CLIENTS_MD5=0
clients_changed() {
	local old_md5=${CLIENTS_MD5}
	local md5_tmp=/tmp/clients_md5.$$.tmp
	dump_wifi_clients >"${md5_tmp}"
	cat /proc/net/arp "${INFILE}" >>"${md5_tmp}"
	CLIENTS_MD5=$(md5sum "${md5_tmp}")
	rm -f "${md5_tmp}"
	[ "${CLIENTS_MD5}" != "${old_md5}" ] && return 0
	return 1
}

# main loop: watch for changes to INFILE, and run the filter if needed
run_loop() {
	while true; do
		# we collect into an "offline" file, and then move the entire
		# result into the lease file in one step, to prevent nodes or
		# their status from jittering in and out of existence in the UI
		# Note that we can't actually use mv, because that will break
		# the inotify interface that bwcd is using to watch for changes.
		clients_changed && {
			collect_clients >"${OUTFILE}.tmp"
			cat "${OUTFILE}.tmp" >"${OUTFILE}"
			rm -f "${OUTFILE}.tmp"
		}
		[ "${CHECK_INTERVAL}" = "0" ] && break
		sleep "${CHECK_INTERVAL}"
	done
}

# display usage string and exit
usage() {
	echo >&2 "Usage: $0 <infile> <outfile> [interval]"
	echo >&2 "Create dhcp.leases-like file from various sources, for bwcd usage"
	echo >&2 "<infile> must be different from <outfile>"
	echo >&2 "If <interval> is zero, only perform collection once"
	exit 1
}


# immediate execution section
INFILE="$1"
OUTFILE="$2"
CHECK_INTERVAL="${CHECK_INTERVAL:-${3:-1}}"
[ -z "${PIDFILE}" ] && PIDFILE=/tmp/$(basename $0).pid
[ -z "${INFILE}" -o -z "${OUTFILE}" -o "${INFILE}" = "${OUTFILE}" ] && usage
check_self_running
${LOGGER:=logger} "Starting ${DISPLAY_NAME:-$0}, PID $$"
trap cleanup INT TERM
trap "$LOGGER ignoring HUP" HUP
run_loop
