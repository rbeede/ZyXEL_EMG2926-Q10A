--- linux-3.3.8/net/ipv6/netfilter/nf_conntrack_reasm.c	2016-08-04 13:39:00.000000000 +0800
+++ linux-3.3.8/net/ipv6/netfilter/nf_conntrack_reasm.c	2016-08-11 15:19:00.000000000 +0800
@@ -66,6 +66,8 @@
 	struct in6_addr		saddr;
 	struct in6_addr		daddr;
 
+	int				iif;
+	struct net *	net;
 	unsigned int		csum;
 	__u16			nhoffset;
 };
@@ -141,6 +143,8 @@
 static void nf_ct_frag6_expire(unsigned long data)
 {
 	struct nf_ct_frag6_queue *fq;
+	struct net_device *dev = NULL;
+	struct net *net;
 
 	fq = container_of((struct inet_frag_queue *)data,
 			struct nf_ct_frag6_queue, q);
@@ -152,6 +156,29 @@
 
 	fq_kill(fq);
 
+	net = fq->net;
+	rcu_read_lock();
+	dev = dev_get_by_index_rcu(net, fq->iif);
+	if (!dev)
+		goto out_rcu_unlock;
+
+	IP6_INC_STATS_BH(net, __in6_dev_get(dev), IPSTATS_MIB_REASMTIMEOUT);
+	IP6_INC_STATS_BH(net, __in6_dev_get(dev), IPSTATS_MIB_REASMFAILS);
+
+	/* Don't send error if the first segment did not arrive. */
+	if (!(fq->q.last_in & INET_FRAG_FIRST_IN) || !fq->q.fragments)
+		goto out_rcu_unlock;
+
+	/*
+	   But use as source device on which LAST ARRIVED
+	   segment was received. And do not use fq->dev
+	   pointer directly, device might already disappeared.
+	 */
+	fq->q.fragments->dev = dev;
+	icmpv6_send(fq->q.fragments, ICMPV6_TIME_EXCEED, ICMPV6_EXC_FRAGTIME, 0);
+
+out_rcu_unlock:
+	rcu_read_unlock();
 out:
 	spin_unlock(&fq->q.lock);
 	fq_put(fq);
@@ -191,6 +218,7 @@
 {
 	struct sk_buff *prev, *next;
 	int offset, end;
+	struct net *net = dev_net(skb_dst(skb)->dev);
 
 	if (fq->q.last_in & INET_FRAG_COMPLETE) {
 		pr_debug("Already completed\n");
@@ -304,7 +332,11 @@
 	else
 		fq->q.fragments = skb;
 
-	skb->dev = NULL;
+	if (skb->dev) {
+		fq->iif = skb->dev->ifindex;
+		fq->net = net;
+		skb->dev = NULL;
+	}
 	fq->q.stamp = skb->tstamp;
 	fq->q.meat += skb->len;
 	atomic_add(skb->truesize, &nf_init_frags.mem);
