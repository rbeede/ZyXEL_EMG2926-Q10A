--- a/extensions/libipt_webstr.c	2013-03-15 13:23:03.872987293 +0800
+++ b/extensions/libipt_webstr.c	2013-03-15 13:10:10.000000000 +0800
@@ -0,0 +1,197 @@
+/* Shared library add-on to iptables to add string matching support. 
+ * 
+ * Copyright (C) 2000 Emmanuel Roger  <winfield@freegates.be>
+ *
+ * ChangeLog
+ *     27.01.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ *             Changed --tos to --string in save(). Also
+ *             updated to work with slightly modified
+ *             ipt_string_info.
+ */
+
+/* Shared library add-on to iptables to add webstr matching support. 
+ *
+ * Copyright (C) 2003, CyberTAN Corporation
+ * All Rights Reserved.
+ *
+ * Description:
+ *   This is shared library, added to iptables, for web content inspection. 
+ *   It was derived from 'string' matching support, declared as above.
+ *
+ */
+
+/* iptable-1.4.0rc1 port. (ipt->xt)
+ *
+ * Copyright (C) 2008, Ralink Technology Corporation
+ * All Rights Reserved.
+ */
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+
+#include <xtables.h>
+#include <linux/netfilter_ipv4/ipt_webstr.h>
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"WEBSTR match v%s options:\n"
+"--webstr [!] host            Match a http string in a packet\n"
+"--webstr [!] url             Match a http string in a packet\n"
+"--webstr [!] content         Match a http string in a packet\n",
+XTABLES_VERSION);
+
+	fputc('\n', stdout);
+}
+
+static struct option opts[] = {
+	{ "host", 1, 0, '1' },
+	{ "url", 1, 0, '2' },
+	{ "content", 1, 0, '3' },
+	{0}
+};
+
+///* Initialize the match. */
+//static void
+//init(struct xt_entry_match *m, unsigned int *nfcache)
+//{
+//	*nfcache |= NFC_UNKNOWN;
+//}
+
+/* Initialize the match. */
+static void
+init(struct xt_entry_match *m)
+{
+	return;
+}
+
+
+static void
+parse_string(const unsigned char *s, struct ipt_webstr_info *info)
+{	
+        if (strlen(s) <= BM_MAX_NLEN) strcpy(info->string, s);
+	else xtables_error(PARAMETER_PROBLEM, "WEBSTR too long `%s'", s);
+}
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const void *entry,
+#if 0
+      unsigned int *nfcache,
+#endif
+      struct xt_entry_match **match)
+{	
+	struct ipt_webstr_info *stringinfo = (struct ipt_webstr_info *)(*match)->data;
+
+	switch (c) {
+	case '1':
+                stringinfo->type = IPT_WEBSTR_HOST;
+		break;
+
+	case '2':
+                stringinfo->type = IPT_WEBSTR_URL;
+		break;
+
+	case '3':
+                stringinfo->type = IPT_WEBSTR_CONTENT;
+		break;
+
+	default:
+		return 0;
+	}
+	xtables_check_inverse(optarg, &invert, &optind, 0, argv);
+	if (invert)
+		stringinfo->invert = 1;
+	parse_string(argv[optind-1], stringinfo);
+        stringinfo->len=strlen((char *)&stringinfo->string);
+
+	*flags = 1;
+	return 1;
+}
+
+static void
+print_string(char string[], int invert, int numeric)
+{
+	if (invert)
+		fputc('!', stdout);
+	printf("%s ",string);
+}
+
+/* Final check; must have specified --string. */
+static void
+final_check(unsigned int flags)
+{
+	if (!flags)
+		xtables_error(PARAMETER_PROBLEM,
+			   "WEBSTR match: You must specify `--webstr'");
+}
+
+/* Prints out the matchinfo. */
+static void
+print(const void *ip,
+      const struct xt_entry_match *match,
+      int numeric)
+{
+	struct ipt_webstr_info *stringinfo = (struct ipt_webstr_info *)match->data;
+
+	printf("WEBSTR match ");
+
+	
+	switch (stringinfo->type) {
+	case IPT_WEBSTR_HOST:
+		printf("host ");
+		break;
+
+	case IPT_WEBSTR_URL:
+		printf("url ");
+		break;
+
+	case IPT_WEBSTR_CONTENT:
+		printf("content ");
+		break;
+
+	default:
+		printf("ERROR ");
+		break;
+	}
+
+	print_string(((struct ipt_webstr_info *)match->data)->string,
+		  ((struct ipt_webstr_info *)match->data)->invert, numeric);
+}
+
+/* Saves the union ipt_matchinfo in parsable form to stdout. */
+static void
+save(const void *ip, const struct xt_entry_match *match)
+{
+	printf("--webstr ");
+	print_string(((struct ipt_webstr_info *)match->data)->string,
+		  ((struct ipt_webstr_info *)match->data)->invert, 0);
+}
+
+struct xtables_match webstr = { 
+	.next = NULL,
+	.name = "webstr",
+    .version = XTABLES_VERSION,
+	.family	= NFPROTO_UNSPEC,
+    .size = XT_ALIGN(sizeof(struct ipt_webstr_info)),
+    .userspacesize = XT_ALIGN(sizeof(struct ipt_webstr_info)),
+    .help = &help,
+    .init = &init,
+    .parse = &parse,
+    .final_check = &final_check,
+    .print = &print,
+    .save = &save,
+    .extra_opts = opts
+};
+
+void _init(void)
+{
+	xtables_register_match(&webstr);
+}
--- a/extensions/libipt_PORTTRIGGER.c
+++ b/extensions/libipt_PORTTRIGGER.c
@@ -0,0 +1,291 @@
+/* Shared library add-on to iptables to add porttrigger support. */
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <xtables.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+//#include <linux/netfilter_ipv4/ip_nat_rule.h>
+#include <linux/netfilter_ipv4/ipt_PORTTRIGGER.h>
+
+/* Function which prints out usage message. */
+static void help(void)
+{
+	printf(
+		"PORTTRIGGER target options:\n"
+		" --mode [dnat (PREROUTING)|forward_in|forward_out (FORWARD)]\n"
+		" --trigger-proto [tcp|udp|all(any)]\n"
+		" --forward-proto [tcp|udp|all(any)]\n"
+		" --trigger-ports <port>[-<port>,<port>]\n"
+		" --forward-ports <port>[-<port>,<port>]\n"
+		" --timer [sec]\n");
+}
+
+static struct option opts[] = {
+	{"mode", 1, 0, '1'},
+	{ "trigger-proto", 1, 0, '2' },
+	{ "forward-proto", 1, 0, '3' },
+	{ "trigger-ports", 1, 0, '4' },
+	{ "forward-ports", 1, 0, '5' },
+	{ "timer", 1, 0, '6' },
+	{ .name = NULL }
+};
+
+/* Initialize the target. */
+static void
+init(struct xt_entry_target *t)
+{
+}
+
+static void
+parse_multi_ports(const char *portstring, 
+	struct ipt_mport *minfo)
+{
+	char *buffer, *cp, *next, *range;
+	unsigned int i;
+        u_int16_t m;
+
+	buffer = strdup(portstring);
+	if (!buffer) xtables_error(OTHER_PROBLEM, "strdup failed");
+
+        minfo->pflags = 0;
+
+	for (cp=buffer, i=0, m=1; cp && i<IPT_MULTI_PORTS; cp=next,i++,m<<=1)
+	{
+		next=strchr(cp, ',');
+		if (next) *next++='\0';
+                range = strchr(cp, '-');
+                if (range) {
+                        if (i == IPT_MULTI_PORTS-1)
+                                xtables_error(PARAMETER_PROBLEM,
+                                           "too many ports specified");
+                        *range++ = '\0';
+                }
+		minfo->ports[i] = atoi(cp);
+                if (range) {
+                        minfo->pflags |= m;
+                        minfo->ports[++i] = atoi(range);
+                        if (minfo->ports[i-1] >= minfo->ports[i])
+                                xtables_error(PARAMETER_PROBLEM,
+                                           "invalid portrange specified");
+                        m <<= 1;
+                }
+	}
+
+	if (cp) xtables_error(PARAMETER_PROBLEM, "too many ports specified");
+	if (i == IPT_MULTI_PORTS-1)
+		minfo->ports[i] = minfo->ports[i-1];
+	else if (i < IPT_MULTI_PORTS-1) {
+		minfo->ports[i] = ~0;
+		minfo->pflags |= 1<<i;
+	}
+	free(buffer);
+}
+
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const void *entry,
+      struct xt_entry_target **target)
+{
+	struct ipt_porttrigger_info *info = (struct ipt_porttrigger_info *)(*target)->data;
+	switch (c) {
+	
+		case '1':
+			if (xtables_check_inverse(optarg, &invert, &optind, 0, argv))
+				xtables_error(PARAMETER_PROBLEM, "Unexpected `!' ");
+			if (!strcasecmp(optarg, "dnat"))
+				info->mode= MODE_DNAT;
+			else if (!strcasecmp(optarg, "forward_in"))
+				info->mode= MODE_FORWARD_IN;
+			else if (!strcasecmp(optarg, "forward_out"))
+				info->mode= MODE_FORWARD_OUT;
+			return 1;
+			
+		case '2':
+			if (xtables_check_inverse(optarg, &invert, &optind, 0, argv))
+				xtables_error(PARAMETER_PROBLEM, "Unexpected `!' ");
+			if (!strcasecmp(optarg, "tcp"))
+				info->trigger_proto= IPPROTO_TCP;
+			else if (!strcasecmp(optarg, "udp"))
+				info->trigger_proto = IPPROTO_UDP;
+			else if (!strcasecmp(optarg, "all") || !strcasecmp(optarg, "any"))
+				info->trigger_proto = 0;
+			return 1;
+
+		case '3':
+			if (xtables_check_inverse(optarg, &invert, &optind, 0, argv))
+				xtables_error(PARAMETER_PROBLEM, "Unexpected `!' ");
+			if (!strcasecmp(optarg, "tcp"))
+				info->forward_proto= IPPROTO_TCP;
+			else if (!strcasecmp(optarg, "udp"))
+				info->forward_proto = IPPROTO_UDP;
+			else if (!strcasecmp(optarg, "all") || !strcasecmp(optarg, "any"))
+				info->forward_proto = 0;
+			return 1;
+
+		case '4':
+			if (xtables_check_inverse(optarg, &invert, &optind, 0, argv))
+				xtables_error(PARAMETER_PROBLEM, "Unexpected `!' ");
+			parse_multi_ports(optarg, &info->trigger_ports);
+			return 1;
+
+		case '5':
+			if (xtables_check_inverse(optarg, &invert, &optind, 0, argv))
+				xtables_error(PARAMETER_PROBLEM, "Unexpected `!' ");
+			parse_multi_ports(optarg, &info->forward_ports);
+			return 1;
+				
+		case '6':
+			if (xtables_check_inverse(optarg, &invert, &optind, 0, argv))
+				xtables_error(PARAMETER_PROBLEM, "Unexpected `!' ");
+			info->timer = atoi(optarg);
+			return 1;
+				
+		default:
+			return 0;
+	}
+}
+
+void print_proto(int16_t proto)
+{
+	if(proto == IPPROTO_TCP)
+		printf("TCP ");
+	else if(proto == IPPROTO_UDP)
+		printf("UDP ");
+	else if(proto == 0)
+		printf("ALL ");
+}
+
+void print_multi_ports(struct ipt_mport minfo)
+{
+	int i;
+	u_int16_t pflags = minfo.pflags;
+
+	for (i=0; i < IPT_MULTI_PORTS; i++) {
+		if ( pflags & (1<<i) && minfo.ports[i] == 65535)
+			break;
+		if (i == IPT_MULTI_PORTS-1 && minfo.ports[i-1] == minfo.ports[i] )
+			break;
+		printf("%s", i ? "," : "");
+		printf("%d", minfo.ports[i]);
+		if (pflags & (1<<i)) {
+			printf("-");
+			printf("%d", minfo.ports[++i]);
+		}
+	}
+	printf(" ");
+}
+
+
+void pt_print_mode(u_int16_t mode)
+{
+
+	printf("--mode:");
+	if( mode == MODE_DNAT)
+		printf("dnat ");
+	else if( mode == MODE_FORWARD_IN)
+		printf("forward_in ");
+	else if( mode == MODE_FORWARD_OUT)
+		printf("forward_out ");
+}
+
+/* Prints out the targinfo. */
+static void
+print(const void *ip,
+      const struct xt_entry_target *target,
+      int numeric)
+{
+	struct ipt_porttrigger_info *info = (struct ipt_porttrigger_info *)(target)->data;
+
+	pt_print_mode(info->mode);
+
+	/* 
+	  Modification: for protocol type==all(any) can't work
+      Modified by: ken_chiang 
+      Date:2007/8/21
+    */
+	//if( info->trigger_proto ) {
+		printf("--trigger-proto:");
+		print_proto(info->trigger_proto);
+	//}
+
+	//if( info->forward_proto ) {
+		printf("--forward-proto:");
+		print_proto(info->forward_proto);
+	//}
+
+	if( info->trigger_ports.ports[0]) {
+		printf("--trigger-ports: ");
+		print_multi_ports(info->trigger_ports);
+	}
+
+	if( info->forward_ports.ports[0] ) {
+		printf("  --forward-ports: ");
+		print_multi_ports(info->forward_ports);
+	}
+	
+	if( info->timer >0) {
+		printf("  --timer: %d", info->timer);
+	}
+	
+}
+
+/* Saves the union ipt_targinfo in parsable form to stdout. */
+static void
+save(const void *ip, const struct xt_entry_target *target)
+{
+	struct ipt_porttrigger_info *info = (struct ipt_porttrigger_info *)(target)->data;
+
+	pt_print_mode(info->mode);
+	/* 
+	  Modification: for protocol type==all(any) can't work
+      Modified by: ken_chiang 
+      Date:2007/8/21
+    */
+	//if( info->trigger_proto ) {
+		printf("--trigger-proto:");
+		print_proto(info->trigger_proto);
+	//}	
+
+	//if( info->forward_proto ) {
+		printf("--forward-proto:");
+		print_proto(info->forward_proto);
+	//}
+
+	if( info->trigger_ports.ports[0]) {
+		printf("--trigger-ports: ");
+		print_multi_ports(info->trigger_ports);
+	}
+
+	if( info->forward_ports.ports[0] ) {
+		printf("  --forward-ports: ");
+		print_multi_ports(info->forward_ports);
+	}
+
+	if( info->timer >0) {
+		printf("  --timer: %d", info->timer);
+	}
+}
+
+static struct xtables_target porttrigger = { 
+	.name		= "PORTTRIGGER",
+	.version	= XTABLES_VERSION,
+	.family		= NFPROTO_IPV4,
+	.size		= XT_ALIGN(sizeof(struct ipt_porttrigger_info)),
+	.userspacesize	= XT_ALIGN(sizeof(struct ipt_porttrigger_info)),
+	.help		= &help,
+	.init		= &init,
+	.parse		= &parse,
+	.print		= &print,
+	.save		= &save,
+	.extra_opts	= opts
+};
+
+void _init(void)
+{
+	xtables_register_target(&porttrigger);
+}
