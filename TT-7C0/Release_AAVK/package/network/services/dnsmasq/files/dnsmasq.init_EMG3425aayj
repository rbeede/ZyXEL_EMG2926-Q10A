#!/bin/sh /etc/rc.common
# Copyright (C) 2007 OpenWrt.org

START=60
DNS_SERVERS=""
DOMAIN=""

local args

print_log()
{
	echo "========= print log ==========>  $1 " 1> /dev/null
	#echo "========= print log ==========>  $1 "
}

##check mode,if AP/UR,exit
local sys_mode=$(get_sys_mode)
[ "$sys_mode" == "2" -o "$sys_mode" == "3" ] && {
	/sbin/update_sys_dns_apmode
 	exit 0
}

boot() {
	print_log "boot "
	start
	switch_port lan reset
}

dhcp_calc() {
	print_log "dhcp_calc "
	local ip="$1"
	local res=0

	while [ -n "$ip" ]; do
		part="${ip%%.*}"
		res="$(($res * 256))"
		res="$(($res + $part))"
		[ "${ip%.*}" != "$ip" ] && ip="${ip#*.}" || ip=
	done
	print_log "res=$res "
	echo "$res"
}

append_bool() {
	print_log "append_bool "
	local section="$1"
	local option="$2"
	local value="$3"
	local _loctmp
	config_get_bool _loctmp "$section" "$option" 0
	[ $_loctmp -gt 0 ] && append args "$value"
}

dhcp_add() {

	print_log "dhcp_add "

	local cfg="$1"
	
	config_get enabled "$cfg" enabled
	#[ "$enabled" == "0" ] && return 0
	
	config_get net "$cfg" interface
	print_log "net=$net   cfg=$cfg "
	[ -n "$net" ] || return 0

	check_config=$(cat /tmp/dnsmasq.conf | grep "=$cfg,6")
	print_log "check_config = $check_config"
	if [ "$check_config" == "" ] ;then
		return 0
	fi

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || networkid="$net"

	config_get ifname "$net" ifname

	print_log "networkid=$networkid   ifname=$ifname "

	[ -n "$ifname" ] || return 0

	config_get dnsserver "$net" dns
	[ "$cachelocal" = "0" -a -n "$dnsserver" ] && {
		DNS_SERVERS="$DNS_SERVERS $dnsserver"
	}

	append_bool "$cfg" ignore "-2 $ifname" && return 0

	config_get proto "$net" proto

	print_log "networkid=$networkid   ifname=$ifname  DNS_SERVERS=$DNS_SERVERS "

	[ static = "$proto" ] || return 0

	config_get ipaddr "$net" ipaddr
	config_get netmask "$cfg" netmask
	[ -n "$netmask" ] || config_get netmask "$net" netmask

	print_log "ipaddr=$ipaddr   netmask=$netmask  net=$net   cfg=$cfg   "

	#check for an already active dhcp server on the interface, unless 'force' is set
	#config_get_bool force "$cfg" force 0
	#[ $force -gt 0 ] || {
	#	udhcpc -n -q -s /bin/true -t 1 -i $ifname >&- && {
	#		logger -t dnsmasq \
	#			"found already running DHCP-server on interface '$ifname'" \
	#			"refusing to start, use 'option force 1' to override"
	#		return 0
	#	}
	#}

	config_get start "$cfg" start
	config_get limit "$cfg" limit
	config_get leasetime "$cfg" lease
	config_get options "$cfg" options

	leasetime="${leasetime:-12h}"
	start="$(dhcp_calc "${start:-100}")"
	limit=$((limit-1))
	limit="${limit:-150}"

	eval "$(ipcalc.sh $ipaddr $netmask $start $limit)"

        if [ "$enabled" == "1" ]; then
	    append args "-z -i $ifname --dhcp-range=$networkid,$START,$END,$NETMASK,$leasetime${options:+ $options}"
	    print_log "append args \"-z -i $ifname --dhcp-range=$networkid,$START,$END,$NETMASK,$leasetime${options:+ $options}\" "
        fi
        
}

start() {
	print_log "start "
	
	#local enabled=$(uci_get dhcp @dnsmasq[0] enabled)
	#[ "$enabled" == "0" ] && return 0
	
	#update /etc/ethers file
	/sbin/update_ethers

	#update /tmp/dnsmasq.con file
	/sbin/update_lan_dns
	
	#update DUT system dns
	/sbin/update_sys_dns

	/bin/intfGrp_opt60 watch stop
		
        #if DHCP server disable -> return 0 & exit, else if enable -> run start().
        #ignore=$(uci_get dhcp lan enabled)
        #[ "$ignore" = "0" ] && return 0

	local server_enabled=$(uci_get dhcp lan server_enabled)
        [ "$server_enabled" = "0" ] && return 0

	include /lib/network
	scan_interfaces

	config_load dhcp

	args=""
	config_foreach dhcp_add dhcp

	print_log "args=$args"



	rm /tmp/del_watch
	ps | grep watch | grep link_monitor |  awk '{print $1}' > /tmp/del_watch
	exec < /tmp/del_watch
	while read line
	do
		kill -9 $line
	done	

	/usr/sbin/dnsmasq -u root -C /tmp/dnsmasq.conf $args && {
		rm -f /tmp/resolv.conf

		[ -n "$DOMAIN" ] && echo "search $DOMAIN" >> /tmp/resolv.conf
		DNS_SERVERS="$DNS_SERVERS 127.0.0.1"

		print_log " DNS_SERVERS= $DNS_SERVERS "

		for DNS_SERVER in $DNS_SERVERS ; do
			echo "nameserver $DNS_SERVER" >> /tmp/resolv.conf
		done
	}

	watch -tn 2 /bin/link_monitor 1>/dev/null 2>&1 &

	if [ -f "/tmp/lan_dhcp_range" ] ;then
		/bin/switch_port lan reset
		rm /tmp/lan_dhcp_range
	fi	

	local opt60_port=$(uci get intfGrp.Default.option60del)
	if [ "$opt60_port" != "" ]; then
		/bin/intfGrp_opt60 watch start
	fi
        # DROP the traffic which not from LAN's subnet
        #ipaddr=$(uci_get network lan ipaddr)
        #netmask=$(uci_get network lan netmask)
        #prefix_str=`/bin/ipcalc.sh $ipaddr $netmask | grep PREFIX`
        #prefix=$(echo $prefix_str | sed 's/PREFIX=//g')

        #iptables -N BLOCK_DIFF_SUBNET
        #iptables -F BLOCK_DIFF_SUBNET
        #iptables -A BLOCK_DIFF_SUBNET -i br+ ! -s $ipaddr/$prefix -p udp --dport 53 -j DROP
        #iptables -A BLOCK_DIFF_SUBNET -i br+ ! -s $ipaddr/$prefix -p tcp --dport 53 -j DROP
        #print_log "iptables -A BLOCK_DIFF_SUBNET -i br+ ! -s $ipaddr/$prefix -p udp --dport 53 -j DROP "
        #print_log "iptables -A BLOCK_DIFF_SUBNET -i br+ ! -s $ipaddr/$prefix -p tcp --dport 53 -j DROP "
}

stop() {
	print_log "stop "
	[ -f /tmp/resolv.conf ] && {
		rm -f /tmp/resolv.conf
		ln -s /tmp/resolv.conf.auto /tmp/resolv.conf
	}

	
	local ath13_disabled_5G=$(uci get wireless.ath13.disabled)
	local guest_wlan_5G_enabled=$(uci get wireless.ath13.enable_guest_wlan)
	local ath3_disabled_24G=$(uci get wireless.ath3.disabled)
	local guest_wlan_24G_enabled=$(uci get wireless.ath3.enable_guest_wlan)
	#Guest WLAN 2.4G enable.
	if [ "$ath3_disabled_24G" == "0" ] && [ "$guest_wlan_24G_enabled" == "1" ]; then
		echo 1 >/tmp/Guest_WLAN_24G
	fi
	#Guest WLAN 5G enable.
	if [ "$ath13_disabled_5G" == "0" ] && [ "$guest_wlan_5G_enabled" == "1" ]; then
		echo 1 >/tmp/Guest_WLAN_5G
	fi	

	rm /var/run/dnsmasq.pid.ath13
	rm /var/run/dnsmasq.pid.ath3
	killall dnsmasq

	return 0
}
