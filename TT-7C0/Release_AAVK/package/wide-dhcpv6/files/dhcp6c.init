#!/bin/sh /etc/rc.common

DHCP6C_REQUEST_OPTIONS='domain_name_servers domain_name ntp_servers sip_server_address sip_domain_name nis_server_address nis_domain_name nisp_server_address nisp_domain_name bcmcs_server_address bcmcs_domain_name'

get_ifname() {
	local interface=$1
	local ifname
	scan_interfaces
	config_get ifname "$interface" ifname
	printf '%s\n' "$ifname"
	return 0
}

get_device() {
	local interface=$1
	local ifname=$2
	local device
	scan_interfaces
	config_get device "$interface" device
	grep -qE "^ *$device:" /proc/net/dev && \
		printf '%s\n' "$device" || \
		printf '%s\n' "$ifname"
	return 0
}

dhcp6c_write_duid() {
	local mac="${1:-$(ifconfig "$(uci get network.$client_interface.ifname)" | sed -ne 's/[[:space:]]*$//; s/.*HWaddr //p')}"
	#local mac="${1:-$(ifconfig "$client_device" | sed -ne 's/[[:space:]]*$//; s/.*HWaddr //p')}"
	local pat="[0-9A-F][0-9A-F]"

	case "$mac" in
		# exactly 6 octets -> assume type 3 (DUID-LL - RFC3315, 9.4)
		$pat:$pat:$pat:$pat:$pat:$pat)
			local oIFS="$IFS"; IFS=":"; set -- $mac; IFS="$oIFS"

			# low endian
			#if [ "$(printf \\1 | hexdump -n1 -ve '8/2 "" "%04x" ""')" = "0001" ]; then
			#	printf \\x0a\\x00

			# big endian
			#else
			#	printf \\x00\\x0a
			#fi

			duid_mode=$(uci get dhcp6c.basic.duid_mode)
			# duidtype (0001 -> DUID-LLT, 0003 -> DUID-LL (dhcp6c default used))
			if [ "$duid_mode" == "DUID-LLT" ];then
				printf \\x00\\x01
			else
				printf \\x00\\x03
			fi
			
			# hardwaretype
			#printf \\x00\\x06
			printf \\x00\\x01
			
			# timestamp
			timestamp=""
			TS1=""
			TS2=""
			TS3=""
			TS4=""
			if [ "$duid_mode" == "DUID-LLT" ];then
				usedduidlltvalue=$(uci get dhcp6c.basic.duid_llt_value)
				if [ -n "$usedduidlltvalue" ];then
					timestamp="$usedduidlltvalue"
				else
					timestamp=$(printf "%x\n" $(date +"%s"))
					uci set dhcp6c.basic.duid_llt_value="$timestamp"
					uci commit dhcp6c
				fi
				TS1=${timestamp:0:2}
				TS2=${timestamp:2:2}
				TS3=${timestamp:4:2}
				TS4=${timestamp:6:2}
				printf \\x$TS1\\x$TS2\\x$TS3\\x$TS4
			fi
			
			# link-local address
			printf \\x$1\\x$2\\x$3\\x$4\\x$5\\x$6
			
			# logger
			if [ "$duid_mode" == "DUID-LLT" ];then
				logger -t dhcp6c "Using MAC address DUID-LLT 00:03:00:06:$TS1:$TS2:$TS3:$TS4:$1:$2:$3:$4:$5:$6"
			else
				logger -t dhcp6c "Using MAC address DUID-LL 00:03:00:06:$1:$2:$3:$4:$5:$6"
			fi
		;;
		# at least 7 octets -> could be type 1 or type 2
		$pat:$pat:$pat:$pat:$pat:$pat:*)
			local len_id=":$(echo "$mac" | sed -e 's/[^:]//g')"
			local len_hi=$(printf "%02x" $((${#len_id} / 0xFF)) )
			local len_lo=$(printf "%02x" $((${#len_id} % 0xFF)) )

			# low endian
			if [ "$(printf \\1 | hexdump -n1 -ve '8/2 "" "%04x" ""')" = "0001" ]; then
				printf \\x$len_lo\\x$len_hi

			# big endian
			else
				printf \\x$len_hi\\x$len_lo
			fi

			printf $(echo "$mac" | sed -e 's/^/\\x/; s/:/\\x/g')
			logger -t dhcp6c "Using user provided DUID $mac"
		;;
		*)
			logger -t dhcp6c "Unable to derive DUID from interface '$client_device' and no valid user DUID given"
		;;
	esac
}

dhcp6c_write_interface() {
	local cfg=$1
	local sla_id
	local sla_len
	local enabled
	local client_interface
	config_get client_interface basic interface
	default=$(uci_get network $client_interface default)
	bind_LAN=$(uci_get network $client_interface bind_LAN)

	#WenHsien modify for 2926
	if [ -z $bind_LAN ];then
		bind_LAN="br-lan"
	fi
	
	config_get_bool enabled "$cfg" enabled 0

	if [ $enabled -ne 0 ];then
		config_get sla_id "$cfg" sla_id
		config_get sla_len "$cfg" sla_len
        if [ $default -eq 1 ];then
			uci set dhcp6c.basic.intfGrp_write_prefix="0"
			uci commit dhcp6c  
			printf '\tprefix-interface %s {\n' "$(get_ifname $cfg)"
			printf '\t\tsla-id %s;\n' "$sla_id"
			printf '\t\tsla-len %s;\n' "$sla_len"
			printf '\t};\n'
			
		#WenHsien modify for 2926
	    #elif [ $default -eq 0 ];then
		else
		
			if [ ! -z $bind_LAN ];then
				if [ $cfg == "loopback" ];then
					printf '\tprefix-interface lo {\n'
				else
					printf '\tprefix-interface %s {\n' "$bind_LAN"
				fi 
				
				printf '\t\tsla-id %s;\n' "$sla_id"
				printf '\t\tsla-len %s;\n' "$sla_len"
				printf '\t};\n'
			else
				printf ''
			fi
        fi 
	fi
}

dhcp6c_write_request() {
	printf '\trequest %s;\n' $1 | sed -e s/_/-/g
}

dhcp6c_write_config() {
	local pd
	local na
	config_get_bool pd basic pd 0
	config_get_bool na basic na 0

	
	local client_interface
	config_get client_interface basic interface
    v6_proto=$(uci get network.$client_interface.v6_proto)

     if [ "$v6_proto" == "pppoe" ]; then
#echo "dhcp6c.sh w_conf() printf pppoe-wan" >> /dd
		printf 'interface %s {\n' "$v6_proto-$client_interface"
     else 
#echo "dhcp6c.sh w_conf() printf eth0" >> /dd
		printf 'interface %s {\n' "$client_ifname"
     fi

	if [ $pd -ne 0 ]; then
		printf '\tsend ia-pd 0;\n'
	fi

	if [ $na -ne 0 ]; then
		printf '\tsend ia-na 0;\n'
	fi

	local rapid_commit
	config_get_bool rapid_commit basic rapid_commit 0
	[ $rapid_commit -ne 0 ] && printf '\tsend rapid-commit;\n'

	local script
	config_get script basic script
	[ "$script" != "" ] && printf '\tscript "%s";\n' "$script"

	local request
	local value
	for request in $DHCP6C_REQUEST_OPTIONS; do
		config_get_bool value basic "$request" 0
		[ $value -ne 0 ] && dhcp6c_write_request "$request"
	done

	printf '};\n\n'

	if [ $pd -ne 0 ]; then
		printf 'id-assoc pd 0 {\n'
		config_foreach dhcp6c_write_interface interface
		printf '};\n\n'
	fi

	if [ $na -ne 0 ]; then
		printf 'id-assoc na 0 {\n'
		printf '};\n\n'
	fi

	return 0
}

start() {

    	defaultWan=$(uci get dhcp6c.basic.defaultWan)
    	old_defaultWan=$(uci get dhcp6c.basic.old_defaultWan)
    	uci set dhcp6c.basic.old_defaultWan=$defaultWan
    	uci commit dhcp6c

	if [ $defaultWan != $old_defaultWan ];then
        	if [ "${defaultWan:0:3}" = "wan" ];then
			uci set dhcp6c.basic.interface="$defaultWan"
			uci set dhcp6c.basic.defaultWan="0"
			uci set dhcp6c.basic.intfGrp_write_prefix="0"
			uci set dhcp6c.basic.default_static_prefix="0"
			uci commit dhcp6c
        	fi
	fi

    	## This shell script is IPv6 only
    	wanface=$(uci get dhcp6c.basic.interface)
    	IsIpv6=$(uci get network.$wanface.ipv6)
    	if [ -z "$IsIpv6" -o "$IsIpv6" == "0" ];then
        	return
    	fi

	[ ! -e /etc/dhcp6cctlkey ] && `dd if=/dev/urandom count=1 2> /dev/null | md5sum | cut -d" " -f1 > /etc/dhcp6cctlkey`

	[ -e /var/run/dhcp6c.pid ] && return 0

	include /lib/network

	config_load "dhcp6c"

	local enabled
	config_get_bool enabled basic enabled 0
	[ $enabled -eq 0 ] && return 0

	local user_duid
	config_get user_duid basic duid

	logger -t dhcp6c starting dhcp6c

	local client_interface
	config_get client_interface basic interface
	local client_ifname=$(get_ifname "$client_interface")
	local client_device=$(get_device "$client_interface" "$client_ifname")

    	v6_proto=$(uci get network.$client_interface.v6_proto)
    	#mflag=$(uci get network.$client_interface.mflag)

	## LAN IP of PPPoEv6 and DHCPv6 will be created by IA-PD of DHCPv6 packet.
    	if [ "$v6_proto" == "pppoe" ];then
       		uci set dhcp6c.basic.pd=1
       		uci commit dhcp6c  
    	elif [ "$v6_proto" == "dhcp" ];then
       		uci set dhcp6c.basic.pd=1
       		uci commit dhcp6c
    	elif [ "$v6_proto" == "static" ];then
       		uci set dhcp6c.basic.pd=0
       		uci commit dhcp6c
    	fi 

	## mflag == 1 means WAN IP will be created by IA-NA DHCPv6;
	## mflag == 0 means WAN IP will be created by kernel within Prefix of RA.
	#if [ "$mflag" == "1" ];then
	#   uci set dhcp6c.basic.na=1
	#   uci commit dhcp6c
        #   echo "0" > /proc/sys/net/ipv6/conf/all/accept_ra_pinfo
        #elif [ "$mflag" == "0" ];then
        #   uci set dhcp6c.basic.na=0
	#   uci commit dhcp6c
        #   echo "1" > /proc/sys/net/ipv6/conf/all/accept_ra_pinfo
        #fi
        

	local config_file="/var/etc/dhcp6c.conf"
	local duid_file="/var/dhcp6c_duid"
	mkdir -m 755 -p /var/etc
	dhcp6c_write_config > $config_file
	dhcp6c_write_duid "$user_duid" > $duid_file

	local debug
	local debug_option
	config_get_bool debug basic debug 0
	[ $debug -eq 1 ] && debug_option="-D"

	local ipv6_address
	if [ "$v6_proto" == "pppoe" ];then
		## WenHsien: Update DNSv6 is considered by sleeping 3 seconds, so reduce it.2016.0727.
		uci set dhcp6c.basic.skipDnsv6UpdateOneTime=1
		uci commit dhcp6c
		/usr/sbin/dhcp6c -c $config_file $debug_option pppoe-$client_interface &
		sleep 3		
		ipv6_address=$(ifconfig pppoe-wan | awk '/Scope:Global/{print $3}')
		if [ "$ipv6_address" != "" ];then
	  		ACTION=start /sbin/hotplug-call dhcp6c
		fi
		return 0  

	elif [ "$v6_proto" == "dhcp" ];then
		## WenHsien: Update DNSv6 is considered by sleeping 3 seconds, so reduce it.2016.0727.
		uci set dhcp6c.basic.skipDnsv6UpdateOneTime=1
		uci commit dhcp6c

		/usr/sbin/dhcp6c -c $config_file $debug_option $client_ifname &
		sleep 3
		ACTION=start /sbin/hotplug-call dhcp6c
		return 0
		
	elif [ "$v6_proto" == "static" ];then
		v6lanstatic=$(uci get network.general.v6lanstatic)
		[ $v6lanstatic = 1 ] && {
			/etc/init.d/radvd reload config ##Only reload radvd config.
		}
		return 0

	else 
		return 0
	fi
}

stop() {
	config_load "dhcp6c"
	logger -t dhcp6c stopping dhcp6c	
	#killall dhcp6c
	
	##Remove PID
	dhcp6cPid=$(cat /var/run/dhcp6c.pid)
	kill -9 $dhcp6cPid
	rm -f /var/etc/dhcp6c.conf /var/run/dhcp6c.pid
	ACTION=stop /sbin/hotplug-call dhcp6c
	return 0
}

restart() {
	lock /tmp/.dhcp6c.lock
	logger -t dhcp6c restarting dhcp6c	
	dhcp6cPid=$(cat /var/run/dhcp6c.pid)
	kill -9 $dhcp6cPid
	rm -f /var/etc/dhcp6c.conf /var/run/dhcp6c.pid	
	sleep 1
	start
	lock -u /tmp/.dhcp6c.lock
	return 0	
}

