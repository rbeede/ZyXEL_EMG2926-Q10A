--- a/dhcp6c.c
+++ b/dhcp6c.c
@@ -1700,16 +1700,19 @@ client6_recvadvert(ifp, dh6, len, optinf
 	    evd = TAILQ_NEXT(evd, link)) {
 		u_int16_t stcode;
 		char *stcodestr;
+		struct dhcp6_listval *iav=NULL, *siav=NULL;
+		struct ia_conf *iac;
+		struct dhcp6_ia iaparam;
 
 		switch (evd->type) {
 		case DHCP6_EVDATA_IAPD:
 			stcode = DH6OPT_STCODE_NOPREFIXAVAIL;
 			stcodestr = "NoPrefixAvail";
-			continue;
+			break;
 		case DHCP6_EVDATA_IANA:
 			stcode = DH6OPT_STCODE_NOADDRSAVAIL;
 			stcodestr = "NoAddrsAvail";
-			continue;
+			break;
 		default:
 			continue;
 		}
@@ -1719,6 +1722,47 @@ client6_recvadvert(ifp, dh6, len, optinf
 			    "advertise contains %s status", stcodestr);
 			return (-1);
 		}
+
+		/*
+		 * Peter: ReadyLogo
+		 * RFC3315
+		 *   17.1.3. Receipt of Advertise Messages
+		 *
+		 * The client MUST ignore any Advertise message that includes a Status
+		 * Code option containing the value NoAddrsAvail.
+  		 */
+		if (evd->type == DHCP6_EVDATA_IANA) {
+			iaparam.iaid = 0;
+			for (iac = TAILQ_FIRST(&ifp->iaconf_list); 
+				iac; iac = TAILQ_NEXT(iac, link)) 
+			{
+				if (iac->type == IATYPE_NA) {
+					iaparam.iaid = iac->iaid;
+					break;
+				} 
+			}
+
+			if ( 	(iaparam.iaid)
+				&&
+				(iav = dhcp6_find_listval(&optinfo->iana_list, 
+				DHCP6_LISTVAL_IANA, &iaparam, 0)) ) 
+			{ 
+				for (siav = TAILQ_FIRST(&iav->sublist); siav; 
+					siav = TAILQ_NEXT(siav, link)) 
+				{
+					if ( 	(siav->type == DHCP6_LISTVAL_STCODE) 
+						&& 
+						(siav->val_num16 == DH6OPT_STCODE_NOADDRSAVAIL) ) 
+					{
+					    dprintf(LOG_INFO, FNAME, "DH6OPT_STCODE_NOADDRSAVAIL");
+						return (-1);
+					}
+				}	
+			}	
+		}
+		else if (evd->type == DHCP6_EVDATA_IAPD) {
+			//Peter: need to be added in the future....
+		}
 	}
 
 	if (ev->state != DHCP6S_SOLICIT ||
@@ -1867,9 +1911,11 @@ client6_recvreply(ifp, dh6, len, optinfo
 	ssize_t len;
 	struct dhcp6_optinfo *optinfo;
 {
-	struct dhcp6_listval *lv;
+	struct dhcp6_listval *lv, *iav;
 	struct dhcp6_event *ev;
 	int state;
+	struct ia_conf *iac;
+	struct dhcp6_ia iaparam;
 
 	/* find the corresponding event based on the received xid */
 	ev = find_event_withid(ifp, ntohl(dh6->dh6_xid) & DH6_XIDMASK);
@@ -1933,6 +1979,43 @@ client6_recvreply(ifp, dh6, len, optinfo
 	}
 
 	/*
+	 * Peter: ReadyLogo
+	 * RFC3315
+	 *   18.1.8. Receipt of Reply Messages
+	 *
+	 * When the client receives a Reply message in response to Renew/Rebind
+	 * message, the client examines each IA independently.  For each
+	 * IA in the original Renew/Rebind message, the client sends a Renew/Rebind
+	 * if the IA is not in the Reply message.
+	 */
+	if ( (state == DHCP6S_RENEW) || (state == DHCP6S_REBIND) ) {
+		for (iac = TAILQ_FIRST(&ifp->iaconf_list); iac; iac = TAILQ_NEXT(iac, link)) {
+			iav = NULL;
+			if (iac->type == IATYPE_PD) {
+				iaparam.iaid = iac->iaid;
+				iav = dhcp6_find_listval(&optinfo->iapd_list,
+					DHCP6_LISTVAL_IAPD, &iaparam, 0);
+			}
+			else if (iac->type == IATYPE_NA) {
+				iaparam.iaid = iac->iaid;
+				iav = dhcp6_find_listval(&optinfo->iana_list,
+					DHCP6_LISTVAL_IANA, &iaparam, 0);
+			}
+			else {
+				continue;
+			}
+			if (!iav) {
+				client6_send(ev);
+
+				dhcp6_set_timeoparam(ev);
+				dhcp6_reset_timer(ev);
+				dprintf(LOG_INFO, FNAME, "no IA_PD or IA_NA option after sending RENEW or REBIND packet");
+				return (0);
+			}
+		}
+	}
+
+	/*
 	 * The client MAY choose to report any status code or message from the
 	 * status code option in the Reply message.
 	 * [RFC3315 Section 18.1.8]
@@ -1941,6 +2024,47 @@ client6_recvreply(ifp, dh6, len, optinfo
 	     lv = TAILQ_NEXT(lv, link)) {
 		dprintf(LOG_INFO, FNAME, "status code: %s",
 		    dhcp6_stcodestr(lv->val_num16));
+
+		if (state == DHCP6S_REQUEST) {
+			/*
+			 * Peter: ReadyLogo
+			 * RFC3315
+			 *   18.1.8. Receipt of Reply Messages
+			 *
+ 			 * If the client receives a Reply message with a Status Code containing
+		 	 * UnspecFail, the server is indicating that it was unable to process
+ 			 * the message due to an unspecified failure condition. 
+	 		 * The client retransmits the original message.
+	  		 */
+			if (lv->val_num16 == DH6OPT_STCODE_UNSPECFAIL) { 
+				client6_send(ev);
+
+				dhcp6_set_timeoparam(ev);
+				dhcp6_reset_timer(ev);
+				dprintf(LOG_INFO, FNAME, "DH6OPT_STCODE_UNSPECFAIL");
+				return (0);
+			}
+
+			/*
+			 * Peter: ReadyLogo
+			 * RFC3315
+			 *   18.1.8. Receipt of Reply Messages
+			 *
+			 * When the client receives a Reply message with a Status Code option
+			 * with the value UseMulticast, the client records the receipt of the
+			 * message and sends subsequent messages to the server through the
+			 * interface on which the message was received using multicast.  The
+			 * client resends the original message using multicast.
+	  		 */
+			if (lv->val_num16 == DH6OPT_STCODE_USEMULTICAST) {
+				client6_send(ev);
+
+				dhcp6_set_timeoparam(ev);
+				dhcp6_reset_timer(ev);
+				dprintf(LOG_INFO, FNAME, "DH6OPT_STCODE_USEMULTICAST");
+				return (0);
+			}
+		}
 	}
 
 	if (!TAILQ_EMPTY(&optinfo->dns_list)) {
