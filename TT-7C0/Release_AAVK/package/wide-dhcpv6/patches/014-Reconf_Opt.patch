--- a/common.c
+++ b/common.c
@@ -1404,6 +1404,7 @@ dhcp6_copy_options(dst, src)
 	if (duidcpy(&dst->serverID, &src->serverID))
 		goto fail;
 	dst->rapidcommit = src->rapidcommit;
+	dst->reconfigureAccept = src->reconfigureAccept;
 
 	if (dhcp6_copy_list(&dst->iapd_list, &src->iapd_list))
 		goto fail;
@@ -1705,10 +1706,22 @@ dhcp6_get_options(p, ep, optinfo)
 				    optinfo->delayedauth_offset,
 				    optinfo->delayedauth_realmlen);
 				break;
-#ifdef notyet
+//#ifdef notyet
 			case DHCP6_AUTHPROTO_RECONFIG:
+				if (authinfolen == 0) {
+					optinfo->authflags |=
+						DHCP6OPT_AUTHFLAG_NOINFO;
+					break;
+				}
+
+				optinfo->reconfigauth_type = *cp++;
+				optinfo->reconfigauth_offset = cp - bp;
+				struct dhcp6 *dh6;
+				memcpy(optinfo->reconfigauth_val, cp,
+				    optinfo->reconfigauth_offset);
+				cp += 16;
 				break;
-#endif
+//#endif
 			default:
 				dprintf(LOG_INFO, FNAME,
 				    "unsupported authentication protocol: %d",
@@ -1727,6 +1740,14 @@ dhcp6_get_options(p, ep, optinfo)
 			memcpy(optinfo->ifidopt_id, cp, optlen);
 			optinfo->ifidopt_len = optlen;
 			break;
+		case DH6OPT_RECONF_MSG:
+			optinfo->reconfigureMsgType = *cp++;
+			break;
+		case DH6OPT_RECONF_ACCEPT:
+			if (optlen != 0)
+				goto malformed;
+			optinfo->reconfigureAccept = 1;
+			break;
 		case DH6OPT_SIP_SERVER_D:
 			if (dhcp6_get_domain(optlen, cp, opt,
 			    &optinfo->sipname_list) == -1)
@@ -2275,6 +2296,13 @@ dhcp6_set_options(type, optbp, optep, op
 		}
 	}
 
+	if (optinfo->reconfigureAccept) {
+		if (copy_option(DH6OPT_RECONF_ACCEPT, 0, NULL, &p,
+		    optep, &len) != 0) {
+			goto fail;
+		}
+	}
+
 	for (op = TAILQ_FIRST(&optinfo->iana_list); op;
 	    op = TAILQ_NEXT(op, link)) {
 		int optlen;
@@ -2497,15 +2525,16 @@ dhcp6_set_options(type, optbp, optep, op
 				authlen += optinfo->delayedauth_realmlen +
 				    sizeof(optinfo->delayedauth_keyid) + 16;
 				break;
-#ifdef notyet
+//#ifdef notyet
 			case DHCP6_AUTHPROTO_RECONFIG:
 				/* type + key-or-HAMC */
-				authlen += 17;
+				authlen += sizeof(optinfo->reconfigauth_type) +
+					sizeof(optinfo->reconfigauth_val);
 				break;
-#endif
+//#endif
 			default:
 				dprintf(LOG_ERR, FNAME,
-				    "unexpected authentication protocol");
+				    "unexpected authentication protocol_countAuthLen");
 				goto fail;
 			}
 		}
@@ -2551,12 +2580,15 @@ dhcp6_set_options(type, optbp, optep, op
 				    optinfo->delayedauth_keyid,
 				    optinfo->delayedauth_offset); 
 				break;
-#ifdef notyet
+//#ifdef notyet
 			case DHCP6_AUTHPROTO_RECONFIG:
-#endif
+				optinfo->reconfigauth_offset = ((char *)p - (char *)optbp) +
+					authlen - sizeof(optinfo->reconfigauth_val);
+				break;
+//#endif
 			default:
 				dprintf(LOG_ERR, FNAME,
-				    "unexpected authentication protocol");
+				    "unexpected authentication protocol_countAuthOffset");
 				free(auth);
 				goto fail;
 			}
--- a/dhcp6c.c
+++ b/dhcp6c.c
@@ -111,6 +111,8 @@ static struct keyinfo *ctlkey = NULL;
 static int ctldigestlen;
 
 static int infreq_mode = 0;
+static int reconfigure_accept = 1;
+static int recv_reconfigure_message = 0;
 
 static inline int get_val32 __P((char **, int *, u_int32_t *));
 static inline int get_ifname __P((char **, int *, char *, int));
@@ -131,6 +133,8 @@ static struct dhcp6_serverinfo *select_s
 static void client6_recv __P((void));
 static int client6_recvadvert __P((struct dhcp6_if *, struct dhcp6 *,
 				   ssize_t, struct dhcp6_optinfo *));
+static int client6_recvreconfigure __P((struct dhcp6_if *, struct dhcp6 *,
+				   ssize_t, struct dhcp6_optinfo *));
 static int client6_recvreply __P((struct dhcp6_if *, struct dhcp6 *,
 				  ssize_t, struct dhcp6_optinfo *));
 static void client6_signal __P((int));
@@ -1474,6 +1478,11 @@ client6_send(ev)
 		goto end;
 	}
 
+	/* reconfigure accept */
+	if (reconfigure_accept) {
+		optinfo.reconfigureAccept = 1;
+	}
+
 	/* rapid commit (in Solicit only) */
 	if (ev->state == DHCP6S_SOLICIT &&
 	    (ifp->send_flags & DHCIFF_RAPID_COMMIT)) {
@@ -1574,7 +1583,20 @@ client6_send(ev)
 			    optinfo.delayedauth_offset + sizeof(*dh6),
 			    ev->authparam->key)) {
 				dprintf(LOG_WARNING, FNAME,
-				    "failed to calculate MAC");
+				    "failed to calculate MAC_DELAYED");
+				goto end;
+			}
+			break;
+		case DHCP6_AUTHPROTO_RECONFIG:
+			if (ev->authparam->key == NULL)
+				break;
+
+			if (dhcp6_calc_mac((char *)dh6, len,
+			    optinfo.authproto, optinfo.authalgorithm,
+			    optinfo.reconfigauth_offset + sizeof(*dh6),
+			    ev->authparam->key)) {
+				dprintf(LOG_WARNING, FNAME,
+				    "failed to calculate MAC_RECONFIG");
 				goto end;
 			}
 			break;
@@ -1709,6 +1731,9 @@ client6_recv()
 	case DH6_REPLY:
 		(void)client6_recvreply(ifp, dh6, len, &optinfo);
 		break;
+	case DH6_RECONFIGURE:
+		(void)client6_recvreconfigure(ifp, dh6, len, &optinfo);
+		break;
 	default:
 		dprintf(LOG_INFO, FNAME, "received an unexpected message (%s) "
 		    "from %s", dhcp6msgstr(dh6->dh6_msgtype),
@@ -1757,6 +1782,10 @@ client6_recvadvert(ifp, dh6, len, optinf
 		return (-1);
 	}
 
+	if (optinfo->reconfigureAccept==1) {
+		reconfigure_accept = 1;
+	}
+
 	/* validate authentication */
 	authparam0 = *ev->authparam;
 	if (process_auth(&authparam0, dh6, len, optinfo)) {
@@ -2010,6 +2039,106 @@ find_server(ev, duid)
 }
 
 static int
+client6_recvreconfigure(ifp, dh6, len, optinfo)
+	struct dhcp6_if *ifp;
+	struct dhcp6 *dh6;
+	ssize_t len;
+	struct dhcp6_optinfo *optinfo;
+{
+	recv_reconfigure_message = 1;
+
+	/* find the corresponding event based on the received xid */
+	if ((ntohl(dh6->dh6_xid) & DH6_XIDMASK) != 0) {
+		dprintf(LOG_INFO, FNAME, "XID not zero");
+		return (-1);
+	}
+
+	/* A Reply message must contain a Server ID option */
+	if (optinfo->serverID.duid_len == 0) {
+		dprintf(LOG_INFO, FNAME, "no server ID option");
+		return (-1);
+	}
+
+	/*
+	 * DUID in the Client ID option (which must be contained for our
+	 * client implementation) must match ours.
+	 */
+	if (optinfo->clientID.duid_len == 0) {
+		dprintf(LOG_INFO, FNAME, "no client ID option");
+		return (-1);
+	}
+	if (duidcmp(&optinfo->clientID, &client_duid)) {
+		dprintf(LOG_INFO, FNAME, "client DUID mismatch");
+		return (-1);
+	}
+
+	/*reconfigureAccept reconfigureAccept reconfigureAccept
+	 * If the client included a Rapid Commit option in the Solicit message,
+	 * the client discards any Reply messages it receives that do not
+	 * include a Rapid Commit option.
+	 * (should we keep the server otherwise?)
+	 * [RFC3315 Section 17.1.4]
+	 reconfigureAccept reconfigureAccept reconfigureAccept*/
+	if (!reconfigure_accept) {
+		dprintf(LOG_INFO, FNAME, "no reconfigure accept");
+		return (-1);
+	}
+
+	/* Get IA data from ifp */
+	struct ia_conf *iac;
+	struct ia *ia;
+	int donePD = 0;
+	int doneNA = 0;
+
+    for (iac = TAILQ_FIRST(&ifp->iaconf_list); iac; iac = TAILQ_NEXT(iac, link))
+	{
+		if (iac->type == IATYPE_PD) {
+
+			for (ia = TAILQ_FIRST(&iac->iadata); ia;
+				ia = TAILQ_NEXT(ia, link)) {
+
+				if (ia->conf->type == IATYPE_PD) {
+					struct timeval timo;
+					timo.tv_sec = 0;
+					timo.tv_usec = 0;
+					dhcp6_set_timer(&timo, ia->timer);
+
+					break;
+				}
+			}
+			donePD = 1;
+		}
+		else if (iac->type == IATYPE_NA) {
+
+			for (ia = TAILQ_FIRST(&iac->iadata); ia;
+				ia = TAILQ_NEXT(ia, link)) {
+
+				if (ia->conf->type == IATYPE_NA) {
+					//ia->t1 = 50;
+					//ia->t2 = 80;
+
+					//struct timeval timo;
+					//timo.tv_sec = 0;
+					//timo.tv_usec = 0;
+					//dhcp6_set_timer(&timo, ia->timer);// will lead crash even give t1 t2 values.2015.0820#.
+
+					break;
+				}
+			}
+			doneNA = 1;
+		}
+
+		if (donePD==1 && doneNA==1) {
+			break;
+		}
+		else {
+			continue;
+		}
+	}
+	return (0);
+}
+
+static int
 client6_recvreply(ifp, dh6, len, optinfo)
 	struct dhcp6_if *ifp;
 	struct dhcp6 *dh6;
@@ -2371,6 +2500,11 @@ process_auth(authparam, dh6, len, optinf
 {
 	struct keyinfo *key = NULL;
 	int authenticated = 0;
+	int authenticated_reconf = 0;
+
+	authparam->authproto = optinfo->authproto;
+	authparam->authalgorithm = optinfo->authalgorithm;
+	authparam->authrdm = optinfo->authrdm;
 
 	switch (optinfo->authproto) {
 	case DHCP6_AUTHPROTO_UNDEF:
@@ -2462,16 +2596,102 @@ process_auth(authparam, dh6, len, optinf
 		}
 
 		break;
+	case DHCP6_AUTHPROTO_RECONFIG:
+		if ((optinfo->authflags & DHCP6OPT_AUTHFLAG_NOINFO)) {
+			dprintf(LOG_INFO, FNAME, "server did not include "
+			    "authentication information");
+			break;
+		}
+
+		if (optinfo->authalgorithm != DHCP6_AUTHALG_HMACMD5) {
+			dprintf(LOG_INFO, FNAME, "unknown authentication "
+			    "algorithm (%d)", optinfo->authalgorithm);
+			break;
+		}
+
+		if (optinfo->authrdm != DHCP6_AUTHRDM_MONOCOUNTER) {
+			dprintf(LOG_INFO, FNAME,"unknown RDM (%d)",
+			    optinfo->authrdm);
+			break;
+		}
+
+		/*
+		 * Replay protection.  If we do not know the previous RD value,
+		 * we accept the message anyway (XXX).
+		 */
+		if ((authparam->flags & AUTHPARAM_FLAGS_NOPREVRD)) {
+			dprintf(LOG_WARNING, FNAME, "previous RD value is "
+			    "unknown (accept it)");
+		} else {
+			if (dhcp6_auth_replaycheck(optinfo->authrdm,
+			    authparam->prevrd, optinfo->authrd)) {
+				dprintf(LOG_INFO, FNAME,
+				    "possible replay attack detected");
+				break;
+			}
+		}
+
+		// see if here we need to SAVE_KEY or USE_KEY.
+		if (optinfo->reconfigauth_type == 1) {
+
+			if ((key = malloc(sizeof(*key))) == NULL) {
+				return (-1);
+			}
+			key->secretlen = 16;
+			key->secret = malloc(key->secretlen);
+			memset(key->secret, 0, sizeof(key->secretlen));
+
+			if (key->secret == NULL) {
+				dprintf(LOG_WARNING, FNAME, "failed "
+					"allocate memory for auth realm");
+				return (-1);
+			}
+
+			if (! optinfo->reconfigauth_val) {
+				return (-1);
+			}
+			memcpy(key->secret, optinfo->reconfigauth_val, key->secretlen);
+
+			authparam->key = key;
+			authenticated_reconf = 1;
+
+		} else if (optinfo->reconfigauth_type == 2) {
+			key = authparam->key;
+
+			/* validate MAC */
+			if (dhcp6_verify_mac((char *)dh6, len, optinfo->authproto,
+			    optinfo->authalgorithm,
+			    optinfo->reconfigauth_offset + sizeof(*dh6), key) == 0) {
+				dprintf(LOG_DEBUG, FNAME, "message_RECONFIG authentication "
+				    "validated");
+				authenticated_reconf = 1;
+			} else {
+				dprintf(LOG_INFO, FNAME, "invalid message_RECONFIG "
+				    "authentication");
+			}
+		}
+		break;
 	default:
 		dprintf(LOG_INFO, FNAME, "server sent unsupported "
 		    "authentication protocol (%d)", optinfo->authproto);
 		break;
 	}
 
-	if (authenticated == 0) {
+	if (optinfo->authproto == DHCP6_AUTHPROTO_DELAYED && authenticated == 0) {
 		if (authparam->authproto != DHCP6_AUTHPROTO_UNDEF) {
 			dprintf(LOG_INFO, FNAME, "message not authenticated "
-			    "while authentication required");
+			    "while authentication_DELAYED required");
+
+			/*
+			 * Right now, we simply discard unauthenticated
+			 * messages.
+			 */
+			return (-1);
+		}
+	} else if (optinfo->authproto == DHCP6_AUTHPROTO_RECONFIG && authenticated_reconf == 0) {
+		if (authparam->authproto != DHCP6_AUTHPROTO_UNDEF) {
+			dprintf(LOG_INFO, FNAME, "message not authenticated "
+			    "while authentication_RECONFIG required");
 
 			/*
 			 * Right now, we simply discard unauthenticated
@@ -2556,6 +2776,40 @@ set_auth(ev, optinfo)
 		    optinfo->delayedauth_realmlen);
 
 		break;
+
+	case DHCP6_AUTHPROTO_RECONFIG:
+		if (authparam->key == NULL) {
+			dprintf(LOG_INFO, FNAME,
+			    "no authentication key_RECONFIG for %s",
+			    dhcp6_event_statestr(ev));
+			return (-1);
+		}
+
+		if (dhcp6_validate_key(authparam->key)) {
+			dprintf(LOG_INFO, FNAME, "key_RECONFIG %s is invalid",
+			    authparam->key->name);
+			return (-1);
+		}
+
+		if (get_rdvalue(optinfo->authrdm, &optinfo->authrd,
+		    sizeof(optinfo->authrd))) {
+			dprintf(LOG_ERR, FNAME, "failed to get a replay "
+			    "detection value_RECONFIG");
+			return (-1);
+		}
+
+		/* RFC3315 Ch21.5.1
+		 * Type of data in Value field carried in this option:
+         *       1   Reconfigure Key value (used in Reply message).
+         *       2   HMAC-MD5 digest of the message (used in Reconfigure
+         *           message).
+		 */
+		optinfo->reconfigauth_type = 2;
+		// count and set reconfigauth_offset in set_opt()
+		memcpy(optinfo->reconfigauth_val, authparam->key->secret,
+				authparam->key->secretlen);
+		break;
+
 	default:
 		dprintf(LOG_ERR, FNAME, "unsupported authentication protocol "
 		    "%d", authparam->authproto);
--- a/dhcp6.h
+++ b/dhcp6.h
@@ -182,6 +182,8 @@ struct dhcp6_optinfo {
 	struct duid clientID;	/* DUID */
 	struct duid serverID;	/* DUID */
 
+	int reconfigureAccept;
+	int reconfigureMsgType;
 	int rapidcommit;	/* bool */
 	int pref;		/* server preference */
 	int32_t elapsed_time;	/* elapsed time (from client to server only) */
@@ -226,7 +228,8 @@ struct dhcp6_optinfo {
 			int offset; /* offset to the HMAC field */
 		} aiu_delayed;
 		struct {
-			int type;
+//			int type;
+			u_int8_t type; // By RFC3315 21.5.1
 			int offset; /* offset to the HMAC field */
 			char val[16]; /* key value */
 		} aiu_reconfig;
@@ -295,7 +298,7 @@ struct dhcp6_relay {
 #define DH6OPT_VENDOR_OPTS 17
 #define DH6OPT_INTERFACE_ID 18
 #define DH6OPT_RECONF_MSG 19
-
+#define DH6OPT_RECONF_ACCEPT 20
 #define DH6OPT_SIP_SERVER_D 21
 #define DH6OPT_SIP_SERVER_A 22
 #define DH6OPT_DNS 23
