--- a/Makefile.in
+++ b/Makefile.in
@@ -56,6 +56,7 @@ mandir=	@mandir@
 GENSRCS=cfparse.c cftoken.c
 CLIENTOBJS=	dhcp6c.o common.o config.o prefixconf.o dhcp6c_ia.o timer.o \
 	dhcp6c_script.o if.o base64.o auth.o dhcp6_ctl.o addrconf.o lease.o \
+	netlink_route.o \
 	$(GENSRCS:%.c=%.o)
 SERVOBJS=	dhcp6s.o common.o if.o config.o timer.o lease.o \
 	base64.o auth.o dhcp6_ctl.o $(GENSRCS:%.c=%.o)
--- a/addrconf.c
+++ b/addrconf.c
@@ -60,6 +60,10 @@
 #include "dhcp6c_ia.h"
 #include "prefixconf.h"
 
+#if defined(CLIENT_DECLINE_SUPPORT) || defined(CLIENT_CONFIRM_SUPPORT)
+#include "addrconf.h"
+#include "dhcp6c.h"
+#else
 TAILQ_HEAD(statefuladdr_list, statefuladdr);
 struct iactl_na {
 	struct iactl common;
@@ -84,6 +88,7 @@ struct statefuladdr {
 	struct iactl_na *ctl;
 	struct dhcp6_if *dhcpif;
 };
+#endif
 
 static struct statefuladdr *find_addr __P((struct statefuladdr_list *,
     struct dhcp6_statefuladdr *));
@@ -113,6 +118,9 @@ update_address(ia, addr, dhcpifp, ctlp, 
 	struct statefuladdr *sa;
 	int sacreate = 0;
 	struct timeval timo;
+#ifdef CLIENT_DECLINE_SUPPORT
+	struct dhcp6_event *ev;
+#endif
 
 	/*
 	 * A client discards any addresses for which the preferred
@@ -208,6 +216,30 @@ update_address(ia, addr, dhcpifp, ctlp, 
 		break;
 	}
 
+#ifdef CLIENT_DECLINE_SUPPORT
+	ev = sa->dhcpif->current_ev;
+	if (ev && ev->state == DHCP6S_REQUEST) {
+		if (ev->dadtimer == NULL) {
+			ev->dadtimer = dhcp6_add_timer(client6_dad_check, ev);
+			if (ev->dadtimer == NULL) {
+				dprintf(LOG_NOTICE, FNAME,
+					"failed to add stateful addr dad timer");
+				remove_addr(sa); /* XXX */
+				return (-1);
+			}
+		}
+		/* update the timer */
+		timo.tv_sec = 5;
+		timo.tv_usec = 0;
+
+		dhcp6_set_timer(&timo, ev->dadtimer);
+		ev->state = DHCP6S_DECLINE;
+
+		/* Remove "Request" message timer */
+		dhcp6_remove_timer(&ev->timer);
+	}
+#endif
+
 	return (0);
 }
 
--- a/addrconf.h
+++ b/addrconf.h
@@ -31,5 +31,35 @@
 
 typedef enum { ADDR6S_ACTIVE, ADDR6S_RENEW, ADDR6S_REBIND} addr6state_t;
 
+#if defined(CLIENT_DECLINE_SUPPORT) || defined(CLIENT_CONFIRM_SUPPORT)
+TAILQ_HEAD(statefuladdr_list, statefuladdr);
+struct iactl_na {
+        struct iactl common;
+        struct statefuladdr_list statefuladdr_head;
+};
+#define iacna_ia common.iactl_ia
+#define iacna_callback common.callback
+#define iacna_isvalid common.isvalid
+#define iacna_duration common.duration
+#define iacna_renew_data common.renew_data
+#define iacna_rebind_data common.rebind_data
+#define iacna_reestablish_data common.reestablish_data
+#define iacna_release_data common.release_data
+#define iacna_cleanup common.cleanup
+
+struct statefuladdr {
+        TAILQ_ENTRY (statefuladdr) link;
+
+        struct dhcp6_statefuladdr addr;
+        time_t updatetime;
+        struct dhcp6_timer *timer;
+        struct iactl_na *ctl;
+        struct dhcp6_if *dhcpif;
+#ifdef CLIENT_CONFIRM_SUPPORT
+	time_t starts;
+#endif
+};
+#endif
+
 extern int update_address __P((struct ia *, struct dhcp6_statefuladdr *,
     struct dhcp6_if *, struct iactl **, void (*)__P((struct ia *))));
--- a/common.c
+++ b/common.c
@@ -2823,6 +2823,12 @@ dhcp6_set_timeoparam(ev)
 		ev->init_retrans = REL_TIMEOUT;
 		ev->max_retrans_cnt = REL_MAX_RC;
 		break;
+#ifdef CLIENT_DECLINE_SUPPORT
+	case DHCP6S_DECLINE:
+		ev->init_retrans = DEC_TIMEOUT;
+		ev->max_retrans_cnt = DEC_MAX_RC;
+		break;
+#endif
 	default:
 		dprintf(LOG_ERR, FNAME, "unexpected event state %d on %s",
 		    ev->state, ev->ifp->ifname);
@@ -3183,6 +3189,10 @@ char *dhcp6_event_statestr(ev)
 		return ("REBIND");
 	case DHCP6S_RELEASE:
 		return ("RELEASE");
+#ifdef CLIENT_DECLINE_SUPPORT
+	case DHCP6S_DECLINE:
+		return ("DECLINE");
+#endif
 	case DHCP6S_IDLE:
 		return ("IDLE");
 	default:
--- a/config.h
+++ b/config.h
@@ -88,6 +88,10 @@ struct dhcp6_if {
 	/* the followings are valid only if authproto is not UNDEF */
 	int authalgorithm;	/* algorithm */
 	int authrdm;		/* replay attack detection method */
+
+#ifdef CLIENT_DECLINE_SUPPORT
+	struct dhcp6_event *current_ev;
+#endif
 };
 
 /* run-time authentication parameters */
@@ -107,6 +111,9 @@ struct dhcp6_event {
 
 	struct dhcp6_if *ifp;
 	struct dhcp6_timer *timer;
+#ifdef CLIENT_DECLINE_SUPPORT
+	struct dhcp6_timer *dadtimer;
+#endif
 
 	struct duid serverid;
 
@@ -162,7 +169,11 @@ struct dhcp6_serverinfo {
 
 /* client status code */
 enum {DHCP6S_INIT, DHCP6S_SOLICIT, DHCP6S_INFOREQ, DHCP6S_REQUEST,
-      DHCP6S_RENEW, DHCP6S_REBIND, DHCP6S_RELEASE, DHCP6S_IDLE};
+      DHCP6S_RENEW, DHCP6S_REBIND, DHCP6S_RELEASE, 
+#ifdef CLIENT_DECLINE_SUPPORT
+      DHCP6S_DECLINE,
+#endif
+      DHCP6S_IDLE};
 
 struct prefix_ifconf {
 	TAILQ_ENTRY(prefix_ifconf) link;
--- a/dhcp6.h
+++ b/dhcp6.h
@@ -31,6 +31,8 @@
 #ifndef __DHCP6_H_DEFINED
 #define __DHCP6_H_DEFINED
 
+#define CLIENT_DECLINE_SUPPORT 1
+
 #ifdef __sun__
 #define	__P(x)	x
 typedef uint8_t u_int8_t;
@@ -98,6 +100,10 @@ typedef uint64_t u_int64_t;
 #define REB_MAX_RT	600000	/* 600secs */
 #define REL_TIMEOUT	1000	/* 1 sec */
 #define REL_MAX_RC	5
+#ifdef CLIENT_DECLINE_SUPPORT
+#define DEC_TIMEOUT	1000	/* 1 sec */
+#define DEC_MAX_RC	5
+#endif
 
 #define DHCP6_DURATION_INFINITE 0xffffffff
 #define DHCP6_DURATION_MIN 30
--- a/dhcp6c.c
+++ b/dhcp6c.c
@@ -78,6 +78,10 @@
 #include <dhcp6c_ia.h>
 #include <prefixconf.h>
 #include <auth.h>
+#if defined(CLIENT_DECLINE_SUPPORT) || defined(CLIENT_CONFIRM_SUPPORT)
+#include <addrconf.h>
+#include "netlink_route.h"
+#endif
 
 static int debug = 0;
 static int exit_ok = 0;
@@ -860,6 +864,9 @@ client6_timo(arg)
 	case DHCP6S_REQUEST:
 	case DHCP6S_RELEASE:
 	case DHCP6S_INFOREQ:
+#ifdef CLIENT_DECLINE_SUPPORT
+	case DHCP6S_DECLINE:
+#endif
 		client6_send(ev);
 		break;
 	case DHCP6S_RENEW:
@@ -921,6 +928,143 @@ client6_timo(arg)
 	return (ev->timer);
 }
 
+#ifdef CLIENT_DECLINE_SUPPORT
+static void
+remove_reachable_addr_from_ev(ev, dad_fail_addr, dad_fail_count)
+	struct dhcp6_event *ev;
+	struct in6_addr *dad_fail_addr;
+	int dad_fail_count;
+{
+	struct dhcp6_eventdata *evd;
+	struct dhcp6_listval *ent, *nent;
+	struct dhcp6_statefuladdr *addr;
+	int i;
+
+	for (evd = TAILQ_FIRST(&ev->data_list); evd; evd = TAILQ_NEXT(evd, link)) {
+		if (evd->type != DHCP6_EVDATA_IANA){
+			continue;
+		}
+		ent = TAILQ_FIRST((struct dhcp6_list *)evd->data);
+		while (ent) {
+			nent = TAILQ_NEXT(ent, link);
+			if (ent->type != DHCP6_LISTVAL_STATEFULADDR6) {
+				ent = nent;
+				continue;
+			}
+			for (i = 0; i < dad_fail_count; i++) {
+				addr = (struct dhcp6_statefuladdr *)&ent->uv;
+				if (IN6_ARE_ADDR_EQUAL(&addr->addr, &dad_fail_addr[i])) {
+					break;
+				}
+			}
+			if (i == dad_fail_count) {
+				/* This stateful addr in the ent is valid. Remove it */
+				TAILQ_REMOVE((struct dhcp6_list *)evd->data, ent, link);
+			}
+			ent = nent;
+		}
+	}
+	return;
+}
+
+static int
+dad_check(ifp, iana_addr, dad_fail_addr, count)
+	struct dhcp6_if *ifp;
+	struct in6_addr *iana_addr;
+	struct in6_addr *dad_fail_addr;
+	int count;
+{
+	struct ia_conf *iac;
+	struct ia *ia;
+	struct iactl_na *iac_na;
+	struct statefuladdr *sa;
+	int dad_fail_count = 0, i;
+
+	for (iac = TAILQ_FIRST(&ifp->iaconf_list);
+		iac;
+		iac = TAILQ_NEXT(iac, link))
+	{
+		if (TAILQ_EMPTY(&iac->iadata)) {
+			/* we dont like non-current IA */
+			continue;
+		}
+		for (ia = TAILQ_FIRST(&iac->iadata); ia; ia = TAILQ_NEXT(ia, link)) {
+			if (ia->conf->type != IATYPE_NA)
+				continue;
+
+			iac_na = (struct iactl_na *)ia->ctl;
+			for (sa = TAILQ_FIRST(&iac_na->statefuladdr_head);
+				sa;
+				sa = TAILQ_NEXT(sa, link))
+			{
+				if (sa->dhcpif != ifp)
+					continue;
+				for (i = 0 ; i < count; i++) {
+					if (IN6_ARE_ADDR_EQUAL(&sa->addr.addr, &iana_addr[i])) {
+						memcpy(&dad_fail_addr[dad_fail_count],
+								&sa->addr.addr, sizeof(struct in6_addr));
+						dad_fail_count++;
+						break;
+					}
+				}
+			}
+		}
+	}
+	return dad_fail_count;
+}
+
+struct dhcp6_timer *
+client6_dad_check(arg)
+	void *arg;
+{
+	struct dhcp6_event *ev = (struct dhcp6_event *)arg;
+	struct dhcp6_if *ifp = NULL;
+	int dad_fail_count, count;
+	struct in6_addr iana_addr[64];
+	struct in6_addr dad_fail_addr[64];
+
+	if (ev == NULL) {
+		return (NULL);
+	}
+	if ((ifp = ev->ifp) == NULL) {
+		return (NULL);
+	}
+
+	count = get_tentative_addr(iana_addr);
+	if (count < 0) {
+		return (NULL);
+	}
+	else if (count == 0) {
+		dad_fail_count = 0;
+	}
+	else {
+		dad_fail_count = dad_check(ifp, iana_addr, dad_fail_addr, count);
+	}
+
+	if (dad_fail_count) {
+		/* DAD fail: prepare to send "decline" message */
+		ev->timeouts = 0;
+		remove_reachable_addr_from_ev(ev, dad_fail_addr, dad_fail_count);
+		client6_send(ev);
+		dhcp6_set_timeoparam(ev);
+		if ((ev->timer = dhcp6_add_timer(client6_timo, ev)) == NULL) {
+			dhcp6_remove_event(ev);
+			return (NULL);
+		}
+		dhcp6_reset_timer(ev);
+	}
+	else {
+		/* Pass DAD: restore to request state */
+		ev->state = DHCP6S_REQUEST;
+		dhcp6_remove_event(ev);
+	}
+	if (ev->dadtimer)
+		dhcp6_remove_timer(&ev->dadtimer);
+
+	return (NULL);
+}
+#endif
+
 static int
 construct_confdata(ifp, ev)
 	struct dhcp6_if *ifp;
@@ -1195,6 +1339,11 @@ client6_send(ev)
 	case DHCP6S_INFOREQ:
 		dh6->dh6_msgtype = DH6_INFORM_REQ;
 		break;
+#ifdef CLIENT_DECLINE_SUPPORT
+	case DHCP6S_DECLINE:
+		dh6->dh6_msgtype = DH6_DECLINE;
+		break;
+#endif
 	default:
 		dprintf(LOG_ERR, FNAME, "unexpected state");
 		exit(1);	/* XXX */
@@ -1231,6 +1380,9 @@ client6_send(ev)
 	case DHCP6S_REQUEST:
 	case DHCP6S_RENEW:
 	case DHCP6S_RELEASE:
+#ifdef CLIENT_DECLINE_SUPPORT
+	case DHCP6S_DECLINE:
+#endif
 		if (duidcpy(&optinfo.serverID, &ev->serverid)) {
 			dprintf(LOG_ERR, FNAME, "failed to copy server ID");
 			goto end;
@@ -1732,6 +1884,9 @@ client6_recvreply(ifp, dh6, len, optinfo
 	    state != DHCP6S_RENEW &&
 	    state != DHCP6S_REBIND &&
 	    state != DHCP6S_RELEASE &&
+#ifdef CLIENT_DECLINE_SUPPORT
+	    state != DHCP6S_DECLINE &&
+#endif
 	    (state != DHCP6S_SOLICIT ||
 	     !(ifp->send_flags & DHCIFF_RAPID_COMMIT))) {
 		dprintf(LOG_INFO, FNAME, "unexpected reply");
@@ -1898,6 +2053,9 @@ client6_recvreply(ifp, dh6, len, optinfo
 
 	/* update stateful configuration information */
 	if (state != DHCP6S_RELEASE) {
+#ifdef CLIENT_DECLINE_SUPPORT
+		ifp->current_ev = ev;
+#endif
 		update_ia(IATYPE_PD, &optinfo->iapd_list, ifp,
 		    &optinfo->serverID, ev->authparam);
 		update_ia(IATYPE_NA, &optinfo->iana_list, ifp,
@@ -1906,6 +2064,20 @@ client6_recvreply(ifp, dh6, len, optinfo
 	// trigger radvd to get the latest prefix.
 	system("/etc/init.d/radvd restart");
 
+#ifdef CLIENT_DECLINE_SUPPORT
+	if (ev->state == DHCP6S_DECLINE) {
+		if (state == DHCP6S_DECLINE) {
+			/* client sends decline to server and got server's reply */
+			ev->state = DHCP6S_REQUEST;
+			dhcp6_remove_event(ev);
+		}
+		else {
+			/* state should be DHCP6S_REQUEST. before DAD start */
+			;
+		}
+	}
+	else
+#endif
 	dhcp6_remove_event(ev);
 
 	if (state == DHCP6S_RELEASE) {
--- a/dhcp6c.h
+++ b/dhcp6c.h
@@ -35,3 +35,8 @@
 extern struct dhcp6_timer *client6_timo __P((void *));
 extern int client6_start __P((struct dhcp6_if *));
 extern void client6_send __P((struct dhcp6_event *));
+
+#ifdef CLIENT_DECLINE_SUPPORT
+extern struct dhcp6_timer *client6_dad_check __P((void *));
+#endif
+
--- a/dhcp6c_ia.c
+++ b/dhcp6c_ia.c
@@ -49,6 +49,9 @@
 #include "prefixconf.h"
 #include "addrconf.h"
 
+#if defined(CLIENT_DECLINE_SUPPORT) || defined(CLIENT_CONFIRM_SUPPORT)
+
+#else
 typedef enum {IAS_ACTIVE, IAS_RENEW, IAS_REBIND} iastate_t;
 
 struct ia {
@@ -76,6 +79,7 @@ struct ia {
 	/* authentication parameters for transaction with servers on this IA */
 	struct authparam *authparam;
 };
+#endif
 
 static int update_authparam __P((struct ia *, struct authparam *));
 static void reestablish_ia __P((struct ia *));
--- a/dhcp6c_ia.h
+++ b/dhcp6c_ia.h
@@ -29,7 +29,37 @@
  * SUCH DAMAGE.
  */
 
+#if defined(CLIENT_DECLINE_SUPPORT) || defined(CLIENT_CONFIRM_SUPPORT)
+typedef enum {IAS_ACTIVE, IAS_RENEW, IAS_REBIND} iastate_t;
+
+struct ia {
+        TAILQ_ENTRY(ia) link;
+
+        /* back pointer to configuration */
+        struct ia_conf *conf;
+
+        /* common parameters of IA */
+        u_int32_t t1;           /* duration for renewal */
+        u_int32_t t2;           /* duration for rebind  */
+
+        /* internal parameters for renewal/rebinding */
+        iastate_t state;
+        struct dhcp6_timer *timer;
+        struct dhcp6_eventdata *evdata;
+
+        /* DHCP related parameters */
+        struct dhcp6_if *ifp;   /* DHCP interface */
+        struct duid serverid;   /* the server ID that provided this IA */
+
+        /* control information shared with each particular config routine */
+        struct iactl *ctl;
+
+        /* authentication parameters for transaction with servers on this IA */
+        struct authparam *authparam;
+};
+#else
 struct ia;			/* this is an opaque type */
+#endif
 
 struct iactl {
 	struct ia *iactl_ia;	/* back pointer to IA */
--- /dev/null
+++ b/netlink_route.c
@@ -0,0 +1,325 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <asm/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <net/if.h>
+#include <errno.h>
+#include <linux/netlink.h>
+#include <linux/rtnetlink.h>
+
+struct nlmsg_list
+{
+	struct nlmsg_list *next;
+	struct nlmsghdr h;
+};
+
+struct rtnl_handle
+{
+        int                     fd;
+        struct sockaddr_nl      local;
+        struct sockaddr_nl      peer;
+        __u32                   seq;
+        __u32                   dump;
+};
+
+typedef int (*rtnl_filter_t)(const struct sockaddr_nl *, struct nlmsghdr *n, void *);
+struct rtnl_dump_filter_arg
+{
+	rtnl_filter_t filter;
+	void *arg1;
+	rtnl_filter_t junk;
+	void *arg2;
+};
+
+static void rtnl_close(struct rtnl_handle *rth)
+{
+	close(rth->fd);
+}
+
+static int rtnl_open(struct rtnl_handle *rth, unsigned subscriptions)
+{
+	socklen_t addr_len;
+	int sndbuf = 32768;
+	int rcvbuf = 32768;
+
+	memset(rth, 0, sizeof(rth));
+
+	rth->fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
+	if (rth->fd < 0) {
+		return -1;
+	}	
+	if (setsockopt(rth->fd,SOL_SOCKET,SO_SNDBUF,&sndbuf,sizeof(sndbuf)) < 0) {
+		return -1;
+	}
+	if (setsockopt(rth->fd,SOL_SOCKET,SO_RCVBUF,&rcvbuf,sizeof(rcvbuf)) < 0) {
+		return -1;
+	}
+	
+	memset(&rth->local, 0, sizeof(rth->local));
+	rth->local.nl_family = AF_NETLINK;
+	rth->local.nl_groups = subscriptions;
+
+	if (bind(rth->fd, (struct sockaddr*)&rth->local, sizeof(rth->local)) < 0) {
+		return -1;
+	}
+	addr_len = sizeof(rth->local);
+	if (getsockname(rth->fd, (struct sockaddr*)&rth->local, &addr_len) <0 ) {
+		return -1;
+	}
+	if (addr_len != sizeof(rth->local)) {
+		return -1;
+	}
+	if (rth->local.nl_family != AF_NETLINK) {
+		return -1;
+	}
+	rth->seq = time(NULL);
+
+	return 0;
+}
+
+static int rtnl_wilddump_request(struct rtnl_handle *rth, int family, int type)
+{
+	struct {
+		struct nlmsghdr nlh;
+		struct rtgenmsg g;
+	} req;
+
+	memset(&req, 0, sizeof(req));
+	req.nlh.nlmsg_len = sizeof(req);
+	req.nlh.nlmsg_type = type;
+	req.nlh.nlmsg_flags = NLM_F_ROOT|NLM_F_MATCH|NLM_F_REQUEST;
+	req.nlh.nlmsg_pid = 0;
+	req.nlh.nlmsg_seq = rth->dump = ++rth->seq;
+	req.g.rtgen_family = family;
+
+	return send(rth->fd, (void*)&req, sizeof(req), 0);
+}
+
+static int rtnl_dump_filter_l(struct rtnl_handle *rth, const struct rtnl_dump_filter_arg *arg)
+{
+	struct sockaddr_nl nladdr;
+	char buf[16384];
+	struct iovec iov = {
+		.iov_base = buf,
+		.iov_len = sizeof(buf),
+	};
+	struct msghdr msg = {
+		.msg_name = &nladdr,
+		.msg_namelen = sizeof(nladdr),
+		.msg_iov = &iov,
+		.msg_iovlen = 1,
+	};
+	int status;
+	const struct rtnl_dump_filter_arg *a;
+
+	while (1) {
+		status = recvmsg(rth->fd, &msg, 0);
+		
+		if (status < 0) {
+			if (errno == EINTR || errno == EAGAIN)
+				continue;
+			return -1;
+		}
+		if (status == 0) {
+			return -1;
+		}
+	
+		for (a = arg; a->filter; a++) {
+			struct nlmsghdr *h = (struct nlmsghdr*)buf;
+
+			while (NLMSG_OK(h, status)) {
+				int err;
+				if (nladdr.nl_pid != 0 
+					|| h->nlmsg_pid != rth->local.nl_pid
+					|| h->nlmsg_seq != rth->dump) 
+				{
+					goto skip_it;
+				}
+			
+				if (h->nlmsg_type == NLMSG_DONE)
+					return 0;
+				if (h->nlmsg_type == NLMSG_ERROR) {
+					return -1;
+				}
+				err = a->filter(&nladdr, h, a->arg1);
+				if (err < 0)
+					return err;
+skip_it:
+				h = NLMSG_NEXT(h, status);
+			}
+		} while(0);	
+		if (msg.msg_flags & MSG_TRUNC)
+			continue;
+		if (status)
+			exit(1);
+	}
+}
+
+static int rtnl_dump_filter(struct rtnl_handle *rth, rtnl_filter_t filter, void *arg1, 
+			rtnl_filter_t junk, void *arg2)
+{
+	const struct rtnl_dump_filter_arg a[2] = {
+		{.filter=filter, .arg1=arg1, .junk=junk, .arg2=arg2},
+		{.filter=NULL, .arg1=NULL, .junk=NULL, .arg2=NULL}
+	};
+
+	return rtnl_dump_filter_l(rth, a);
+}
+
+static int parse_rtattr(struct rtattr *tb[], int max, struct rtattr *rta, int len)
+{
+	memset(tb, 0, sizeof(struct rtattr *) * (max+1));
+	while (RTA_OK(rta, len)) {
+		if (rta->rta_type <= max)
+			tb[rta->rta_type] = rta;
+		rta = RTA_NEXT(rta, len);
+	}
+	return 0;	
+}
+
+static int store_addr(const struct sockaddr_nl *who, struct nlmsghdr *n, void *arg)
+{
+	struct nlmsg_list **linfo = (struct nlmsg_list**)arg;
+	struct nlmsg_list *h;
+	struct nlmsg_list **lp;
+
+	h = malloc(n->nlmsg_len+sizeof(void*));
+	if (h == NULL)
+		return -1;
+	memcpy(&h->h, n, n->nlmsg_len);
+	h->next = NULL;
+
+	for (lp = linfo; *lp; lp = &(*lp)->next);
+	*lp = h;
+
+	return 0;
+}
+
+int get_tentative_addr(struct in6_addr *iana)
+{
+	struct rtnl_handle rth;
+	struct rtattr *rta_tb[IFA_MAX+1];
+	struct nlmsg_list *ainfo = NULL, *tmp;
+	int len;
+	int iana_index = 0;
+
+	rtnl_open(&rth,0);
+	if (rtnl_wilddump_request(&rth, AF_INET6, RTM_GETADDR) < 0 ) {
+		return (-1);
+	}
+	if (rtnl_dump_filter(&rth, store_addr, &ainfo, NULL, NULL) < 0) {
+		return (-1);
+	}
+
+	tmp = ainfo;
+	for (; ainfo; ainfo = ainfo->next) {
+		struct nlmsghdr *n = &ainfo->h;
+		struct ifaddrmsg *ifa = NLMSG_DATA(n);
+		
+		if ((n->nlmsg_type != RTM_NEWADDR) || (ifa->ifa_family != AF_INET6))
+			continue;
+		if (n->nlmsg_len < NLMSG_LENGTH(sizeof(ifa))) {
+			iana_index = -1;
+			goto free_resource;
+		}
+		len = n->nlmsg_len - NLMSG_LENGTH(sizeof(*ifa));
+		if (len < 0) {
+			iana_index = -1;
+			goto free_resource;
+		}
+		parse_rtattr(rta_tb, IFA_MAX, IFA_RTA(ifa), len);
+
+		if (!rta_tb[IFA_LOCAL])
+			rta_tb[IFA_LOCAL] = rta_tb[IFA_ADDRESS];
+		if (!rta_tb[IFA_ADDRESS])
+			rta_tb[IFA_ADDRESS] = rta_tb[IFA_LOCAL];
+		
+		if (ifa->ifa_flags & IFA_F_TENTATIVE) {
+			memcpy(&iana[iana_index], RTA_DATA(rta_tb[IFA_LOCAL]), 
+					sizeof(struct in6_addr));
+			iana_index++;
+		}
+	}
+
+free_resource:
+	ainfo = tmp;	
+	while (ainfo) {
+		tmp = ainfo->next;
+		free(ainfo);
+		ainfo = tmp;
+	}
+
+	rtnl_close(&rth);
+
+	return (iana_index);
+}
+
+char* link_detect_main(int fd)
+{
+	struct sockaddr_nl nladdr;
+	char buf[2048];
+	struct iovec iov = {
+		.iov_base = buf,
+		.iov_len = sizeof(buf),
+	};
+	struct msghdr msg = {
+		.msg_name = &nladdr,
+		.msg_namelen = sizeof(nladdr),
+		.msg_iov = &iov,
+		.msg_iovlen = 1,
+	};
+	int status, ifilen;
+	struct nlmsghdr *h = NULL;
+	struct ifinfomsg *ifi;
+	struct rtattr *rta_tb[IFLA_MAX+1];
+	static char ifname[20];
+
+	status = recvmsg(fd, &msg, 0);
+	h = (struct nlmsghdr*)buf;
+	for(; NLMSG_OK(h, status); h = NLMSG_NEXT(h, status)) {
+		if (h->nlmsg_type == NLMSG_DONE) {
+			return NULL;
+		}
+		else if (h->nlmsg_type == NLMSG_ERROR) {
+			return NULL;
+		}
+		else if (h->nlmsg_type == RTM_NEWLINK) {
+			ifi = NLMSG_DATA(h);
+			ifilen = h->nlmsg_len - NLMSG_LENGTH(sizeof(struct ifinfomsg));
+			if (ifilen < 0) {
+				return NULL;
+			}
+			parse_rtattr(rta_tb, IFLA_MAX, IFLA_RTA(ifi), ifilen);
+			if (rta_tb[IFLA_IFNAME]) {
+				if (ifi->ifi_flags & (IFF_UP|IFF_RUNNING)) {
+					/* link up */
+					strcpy(ifname, (char*)RTA_DATA(rta_tb[IFLA_IFNAME]));
+					return ifname;
+				}
+			}
+		}
+	}
+	return NULL;
+}
+
+int link_detect_init()
+{
+	struct sockaddr_nl sa = {
+		.nl_family = AF_NETLINK,
+		.nl_groups = RTMGRP_LINK | RTMGRP_IPV4_IFADDR | RTMGRP_IPV6_IFADDR,
+	};
+	int fd;
+	
+	if ((fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE)) == -1) {
+		return -1;
+	}
+	if (bind(fd, (struct sockaddr*)&sa, sizeof(sa)) == -1) {
+		return -1;
+	}
+	return fd;
+}
+
+
--- /dev/null
+++ b/netlink_route.h
@@ -0,0 +1,4 @@
+int get_tentative_addr(struct in6_addr *iana);
+char* link_detect_main(int fd);
+int link_detect_init();
+
