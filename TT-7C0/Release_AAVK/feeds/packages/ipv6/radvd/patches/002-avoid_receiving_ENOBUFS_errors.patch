--- a/netlink.c
+++ b/netlink.c
@@ -1,5 +1,4 @@
 /*
- *   $Id: netlink.c,v 1.1 2011/02/25 04:17:23 reubenhwk Exp $
  *
  *   Authors:
  *    Lars Fenneberg		<lf@elemental.net>	 
@@ -29,6 +28,10 @@
 #include <errno.h>
 #include <string.h>
 
+#ifndef SOL_NETLINK
+#define SOL_NETLINK	270
+#endif
+
 void process_netlink_msg(int sock)
 {
 	int len;
@@ -39,7 +42,6 @@ void process_netlink_msg(int sock)
 	struct nlmsghdr *nh;
 	struct ifinfomsg * ifinfo;
 	char ifname[IF_NAMESIZE] = {""};
-	char * rc = 0;
 
 	len = recvmsg (sock, &msg, 0);
 	if (len == -1) {
@@ -57,14 +59,14 @@ void process_netlink_msg(int sock)
 		}
 
 		/* Continue with parsing payload. */
-                ifinfo = NLMSG_DATA(nh);
-                rc = if_indextoname(ifinfo->ifi_index, ifname);
-                if (ifinfo->ifi_flags & IFF_RUNNING) {
-                        dlog(LOG_DEBUG, 3, "%s, ifindex %d, flags is running", ifname, ifinfo->ifi_index);
-                }
-                else {
-                        dlog(LOG_DEBUG, 3, "%s, ifindex %d, flags is *NOT* running", ifname, ifinfo->ifi_index);
-                }
+		ifinfo = NLMSG_DATA(nh);
+		if_indextoname(ifinfo->ifi_index, ifname);
+		if (ifinfo->ifi_flags & IFF_RUNNING) {
+			dlog(LOG_DEBUG, 3, "%s, ifindex %d, flags is running", ifname, ifinfo->ifi_index);
+		}
+		else {
+			dlog(LOG_DEBUG, 3, "%s, ifindex %d, flags is *NOT* running", ifname, ifinfo->ifi_index);
+		}
 		reload_config();
 	}
 }
@@ -72,12 +74,16 @@ void process_netlink_msg(int sock)
 int netlink_socket(void)
 {
 	int rc, sock;
+	unsigned int val = 1;
 	struct sockaddr_nl snl;
 
 	sock = socket(PF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
 	if (sock == -1) {
 		flog(LOG_ERR, "Unable to open netlink socket: %s", strerror(errno));
 	}
+	else if (setsockopt(sock, SOL_NETLINK, NETLINK_NO_ENOBUFS, &val, sizeof(val)) < 0 ) {
+		flog(LOG_ERR, "Unable to setsockopt NETLINK_NO_ENOBUFS: %s", strerror(errno));
+	}
 
 	memset(&snl, 0, sizeof(snl));
 	snl.nl_family = AF_NETLINK;
@@ -93,3 +99,4 @@ int netlink_socket(void)
 	return sock;
 }
 
+
